import React, { useContext, useEffect, useState } from 'react'
import style from "../css/TipWrite.module.css"
import QuillTest from './QuillTest';
import 'bootstrap/dist/css/bootstrap.min.css';
import { useLocation } from 'react-router-dom';
import axios from 'axios';
import { QuillContext } from '../context/QuillContext';


const TipWrite = () => {

    // Ìè¨ÏßÄÏÖò Ìï®Ïàò
    function changeColor(value) {
        if (position.includes(value)) {
            // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Î≤ÑÌäºÏù∏ Í≤ΩÏö∞ ÏÑ†ÌÉù Ìï¥Ï†ú
            setposition(position.filter(item => item !== value));
        } else {
            // ÎàÑÎ•∏ Î≤ÑÌäº Í∞í Ï∂îÍ∞Ä
            setposition([...position, value]);
        }
    }

    const [position, setposition] = useState([]);

    // Í∏Ä ÏûëÏÑ± Í¥ÄÎ†®

    // Quill value
    const { value, setValue } = useContext(QuillContext);

    // ÌäπÏ†ï Í≤åÏãúÍ∏Ä Ï°∞ÌöåÌïòÍ∏∞ ÏúÑÌïú idÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞
    const location = useLocation();
    const searchParams = new URLSearchParams(location.search);
    const id = searchParams.get("id");

    // Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ìï®Ïàò
    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const obj = {};
        formData.forEach((value, key) => {
            console.log(`Ìèº ÏöîÏÜå Ïù¥Î¶Ñ: ${key}, Í∞í: ${value}`);
            obj[key] = value;
        });
        obj["content"] = value;
        if (id) {
            obj["_id"] = id;
        }
        console.log(obj);
        axios
            .post("http://localhost:8088/tip/write", obj)
            .then((res) => {
                alert("Í≤åÏãúÍ∏ÄÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.");
                console.log(res);
                window.location.href = `/tipDetail/${res.data._id}`
            })
            .catch((err) => {
                console.log(err);
                alert("Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®");
                window.location.href = `/tipList`
            });
    };

    // Í≤åÏãúÍ∏ÄÏ†ïÎ≥¥ Ï†ÄÏû•Ìï† State
    const [tipDetail, setTipDetail] = useState([]);

    // ÏàòÏ†ï ÏöîÏ≤≠Ïãú Í∏∞Ï°¥ Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò¨ Ìï®Ïàò
    const getTip = async () => {
        if (id) {
            // projectRouterÎûë ÌÜµÏã†Ìï¥ÏÑú responseÏóê Í≤∞Í≥ºÍ∞í Ï†ÄÏû•
            await axios
                .get(`http://localhost:8088/tip/tipDetail/${id}`)
                .then((res) => {
                    console.log(res);
                    setTipDetail(res.data.detailTip[0]);
                    setValue(res.data.detailTip[0].content);
                    const positionArr = res.data.detailTip[0].category.split(',');
                    setposition(positionArr);
                });
            // respnseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∫ºÎÇ¥ÏÑú StateÏóê Ï†ÄÏû•
        }
    };

    useEffect(() => {
        setValue(null);
        getTip();
    }, []);

    return (
        <div>
            <div className={style.Tip_content_box1}>
                <div className={style.Tip_content_box2}>
                    <form onSubmit={handleSubmit}>
                        <div className="mb-3">
                            <div className={style.Tip_content_box_font}>
                                <h2>Tip ü•á</h2>
                            </div>
                            <h4>Ï†úÎ™©</h4>
                            <input
                                className="form-control"
                                type="text"
                                name="title"
                                {...(id ? { defaultValue: tipDetail.title } : { placeholder: 'Í∏ÄÏ†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.' })} />
                        </div>
                        <div className="mb-3">
                            <h4>Ïπ¥ÌÖåÍ≥†Î¶¨</h4>
                        </div>
                        <button
                            className={style.Tip_button_container}
                            type="button"
                            onClick={() => changeColor('1')}
                            style={{ backgroundColor: position.includes('1') ? '#ABE9FF' : '' }}
                        >
                            Í∞úÎ∞ú
                        </button>
                        <button
                            className={style.Tip_button_container}
                            type="button"
                            onClick={() => changeColor('2')}
                            style={{ backgroundColor: position.includes('2') ? '#ABE9FF' : '' }}
                        >
                            Í≥µÎ∂Ä
                        </button>
                        <button
                            className={style.Tip_button_container}
                            type="button"
                            onClick={() => changeColor('3')}
                            style={{ backgroundColor: position.includes('3') ? '#ABE9FF' : '' }}
                        >
                            Ï∑®ÏóÖ
                        </button>
                        <button
                            className={style.Tip_button_container}
                            type="button"
                            onClick={() => changeColor('4')}
                            style={{ backgroundColor: position.includes('4') ? '#ABE9FF' : '' }}
                        >
                            ÏÉùÌôú / Í∏∞ÌÉÄ
                        </button>
                        <input type="hidden" name="category" value={position.join(',')} />
                        <div className="mb-3">
                            <h4>ÎÇ¥Ïö©</h4>
                        </div>

                        <div className={style.quill_div}>
                            <QuillTest />
                        </div>


                        <div className={style.button_group}>
                            <button className={style.cancel_btn} type='submit'>
                                Ï∑®ÏÜå
                            </button>
                            <button className={style.submit_btn} type='submit'>
                                ÏûëÏÑ±
                            </button>
                        </div>
                    </form>
                </div>


            </div>
        </div >
    )
}

export default TipWrite